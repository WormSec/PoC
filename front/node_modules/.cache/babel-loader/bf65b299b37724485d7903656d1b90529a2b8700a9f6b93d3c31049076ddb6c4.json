{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer = ({\n  machines,\n  links,\n  onMachineClick,\n  isReduced\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [viewBox, setViewBox] = useState({\n    x: 0,\n    y: 0,\n    width: 550,\n    height: 350\n  });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPosition, setLastPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [scale, setScale] = useState(1);\n\n  // Initialize machine positions in a circle layout\n  useEffect(() => {\n    const centerX = 275;\n    const centerY = 175;\n    const radius = 100;\n    const initialPositions = {};\n    machines.forEach((machine, index) => {\n      const angle = index * 2 * Math.PI / machines.length;\n      initialPositions[machine.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n\n    // Only set initial positions if we don't already have them\n    setPositions(prev => {\n      if (Object.keys(prev).length === 0) {\n        return initialPositions;\n      }\n\n      // Add any new machines that don't have positions yet\n      const updatedPositions = {\n        ...prev\n      };\n      machines.forEach(machine => {\n        if (!updatedPositions[machine.id]) {\n          updatedPositions[machine.id] = initialPositions[machine.id];\n        }\n      });\n      return updatedPositions;\n    });\n  }, [machines]);\n\n  // Handle mouse down on SVG for panning\n  const handleSvgMouseDown = e => {\n    if (e.button === 0 && !dragging) {\n      // Left click and not dragging a machine\n      setIsPanning(true);\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse move for panning and dragging\n  const handleSvgMouseMove = e => {\n    if (dragging) {\n      var _svg$getScreenCTM;\n      // We're dragging a machine\n      const svg = svgRef.current;\n      if (!svg) return;\n      const point = svg.createSVGPoint();\n      point.x = e.clientX;\n      point.y = e.clientY;\n\n      // Convert client coordinates to SVG coordinates\n      const svgP = point.matrixTransform((_svg$getScreenCTM = svg.getScreenCTM()) === null || _svg$getScreenCTM === void 0 ? void 0 : _svg$getScreenCTM.inverse());\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: svgP.x,\n          y: svgP.y\n        }\n      }));\n    } else if (isPanning) {\n      // We're panning the view\n      const dx = e.clientX - lastPosition.x;\n      const dy = e.clientY - lastPosition.y;\n\n      // Adjust based on current scale\n      const panSpeed = 1 / scale;\n      setViewBox(prev => ({\n        ...prev,\n        x: prev.x - dx * panSpeed,\n        y: prev.y - dy * panSpeed\n      }));\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse up for ending panning and dragging\n  const handleSvgMouseUp = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle mouse leave for ending panning and dragging\n  const handleSvgMouseLeave = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle machine drag start\n  const handleMachineDragStart = (id, e) => {\n    e.stopPropagation(); // Prevent SVG from starting a pan operation\n    setDragging(id);\n  };\n\n  // Handle zoom with mouse wheel\n  const handleWheel = e => {\n    var _svg$getScreenCTM2;\n    e.preventDefault();\n    const svg = svgRef.current;\n    if (!svg) return;\n\n    // Get mouse position in SVG coordinates\n    const point = svg.createSVGPoint();\n    point.x = e.clientX;\n    point.y = e.clientY;\n    const svgP = point.matrixTransform((_svg$getScreenCTM2 = svg.getScreenCTM()) === null || _svg$getScreenCTM2 === void 0 ? void 0 : _svg$getScreenCTM2.inverse());\n\n    // Calculate new scale\n    const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n    const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n\n    // Calculate new viewBox dimensions\n    const newWidth = viewBox.width * (newScale / scale);\n    const newHeight = viewBox.height * (newScale / scale);\n\n    // Calculate new viewBox position to zoom toward/away from mouse\n    const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n    const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n    const newX = svgP.x - mouseXRatio * newWidth;\n    const newY = svgP.y - mouseYRatio * newHeight;\n    setViewBox({\n      x: newX,\n      y: newY,\n      width: newWidth,\n      height: newHeight\n    });\n    setScale(newScale);\n  };\n\n  // Compute viewBox string\n  const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `visualizer ${isReduced ? 'reduced' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: viewBoxString,\n      onMouseDown: handleSvgMouseDown,\n      onMouseMove: handleSvgMouseMove,\n      onMouseUp: handleSvgMouseUp,\n      onMouseLeave: handleSvgMouseLeave,\n      onWheel: handleWheel,\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n          id: \"grid\",\n          width: \"50\",\n          height: \"50\",\n          patternUnits: \"userSpaceOnUse\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M 50 0 L 0 0 0 50\",\n            fill: \"none\",\n            stroke: \"#f0f0f0\",\n            strokeWidth: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        width: \"2000\",\n        height: \"2000\",\n        fill: \"url(#grid)\",\n        x: \"-500\",\n        y: \"-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), links.map((link, index) => {\n        // Only render links if we have positions for both machines\n        if (!positions[link.source] || !positions[link.target]) return null;\n        return /*#__PURE__*/_jsxDEV(MachineLink, {\n          sourceX: positions[link.source].x,\n          sourceY: positions[link.source].y,\n          targetX: positions[link.target].x,\n          targetY: positions[link.target].y,\n          type: link.type\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this);\n      }), machines.map(machine => {\n        // Only render machines if we have positions for them\n        if (!positions[machine.id]) return null;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          onMouseDown: e => handleMachineDragStart(machine.id, e),\n          children: /*#__PURE__*/_jsxDEV(Machine, {\n            machine: machine,\n            x: positions[machine.id].x,\n            y: positions[machine.id].y,\n            onClick: () => onMachineClick(machine)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 29\n          }, this)\n        }, machine.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setScale(prev => Math.min(5, prev * 1.2)),\n        className: \"zoom-button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setScale(prev => Math.max(0.5, prev / 1.2)),\n        className: \"zoom-button\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setViewBox({\n            x: 0,\n            y: 0,\n            width: 550,\n            height: 350\n          });\n          setScale(1);\n        },\n        className: \"zoom-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n_s(Visualizer, \"Lc9hEcObckMikuSRRWui1qZJbl4=\");\n_c = Visualizer;\nexport default Visualizer;\nvar _c;\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Machine","MachineLink","jsxDEV","_jsxDEV","Visualizer","machines","links","onMachineClick","isReduced","_s","svgRef","positions","setPositions","dragging","setDragging","viewBox","setViewBox","x","y","width","height","isPanning","setIsPanning","lastPosition","setLastPosition","scale","setScale","centerX","centerY","radius","initialPositions","forEach","machine","index","angle","Math","PI","length","id","cos","sin","prev","Object","keys","updatedPositions","handleSvgMouseDown","e","button","clientX","clientY","handleSvgMouseMove","_svg$getScreenCTM","svg","current","point","createSVGPoint","svgP","matrixTransform","getScreenCTM","inverse","dx","dy","panSpeed","handleSvgMouseUp","handleSvgMouseLeave","handleMachineDragStart","stopPropagation","handleWheel","_svg$getScreenCTM2","preventDefault","zoomFactor","deltaY","newScale","max","min","newWidth","newHeight","mouseXRatio","mouseYRatio","newX","newY","viewBoxString","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","patternUnits","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","map","link","source","target","sourceX","sourceY","targetX","targetY","type","onClick","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport { Machine as MachineType, Link } from '../types';\nimport './Visualizer.css';\n\ninterface VisualizerProps {\n    machines: MachineType[];\n    links: Link[];\n    onMachineClick: (machine: MachineType) => void;\n    isReduced: boolean;\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst Visualizer: React.FC<VisualizerProps> = ({ \n    machines, \n    links, \n    onMachineClick,\n    isReduced\n}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n    const [positions, setPositions] = useState<Record<string, Position>>({});\n    const [dragging, setDragging] = useState<string | null>(null);\n    const [viewBox, setViewBox] = useState({ x: 0, y: 0, width: 550, height: 350 });\n    const [isPanning, setIsPanning] = useState(false);\n    const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n    const [scale, setScale] = useState(1);\n    \n    // Initialize machine positions in a circle layout\n    useEffect(() => {\n        const centerX = 275;\n        const centerY = 175;\n        const radius = 100;\n        \n        const initialPositions: Record<string, Position> = {};\n        machines.forEach((machine, index) => {\n            const angle = (index * 2 * Math.PI) / machines.length;\n            initialPositions[machine.id] = {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        });\n        \n        // Only set initial positions if we don't already have them\n        setPositions(prev => {\n            if (Object.keys(prev).length === 0) {\n                return initialPositions;\n            }\n            \n            // Add any new machines that don't have positions yet\n            const updatedPositions = { ...prev };\n            machines.forEach(machine => {\n                if (!updatedPositions[machine.id]) {\n                    updatedPositions[machine.id] = initialPositions[machine.id];\n                }\n            });\n            \n            return updatedPositions;\n        });\n    }, [machines]);\n    \n    // Handle mouse down on SVG for panning\n    const handleSvgMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0 && !dragging) { // Left click and not dragging a machine\n            setIsPanning(true);\n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse move for panning and dragging\n    const handleSvgMouseMove = (e: React.MouseEvent) => {\n        if (dragging) {\n            // We're dragging a machine\n            const svg = svgRef.current;\n            if (!svg) return;\n            \n            const point = svg.createSVGPoint();\n            point.x = e.clientX;\n            point.y = e.clientY;\n            \n            // Convert client coordinates to SVG coordinates\n            const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n            \n            setPositions(prev => ({\n                ...prev,\n                [dragging]: {\n                    x: svgP.x,\n                    y: svgP.y\n                }\n            }));\n        } else if (isPanning) {\n            // We're panning the view\n            const dx = e.clientX - lastPosition.x;\n            const dy = e.clientY - lastPosition.y;\n            \n            // Adjust based on current scale\n            const panSpeed = 1 / scale;\n            \n            setViewBox(prev => ({\n                ...prev,\n                x: prev.x - dx * panSpeed,\n                y: prev.y - dy * panSpeed\n            }));\n            \n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse up for ending panning and dragging\n    const handleSvgMouseUp = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle mouse leave for ending panning and dragging\n    const handleSvgMouseLeave = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle machine drag start\n    const handleMachineDragStart = (id: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent SVG from starting a pan operation\n        setDragging(id);\n    };\n    \n    // Handle zoom with mouse wheel\n    const handleWheel = (e: React.WheelEvent) => {\n        e.preventDefault();\n        \n        const svg = svgRef.current;\n        if (!svg) return;\n        \n        // Get mouse position in SVG coordinates\n        const point = svg.createSVGPoint();\n        point.x = e.clientX;\n        point.y = e.clientY;\n        const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n        \n        // Calculate new scale\n        const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n        const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n        \n        // Calculate new viewBox dimensions\n        const newWidth = viewBox.width * (newScale / scale);\n        const newHeight = viewBox.height * (newScale / scale);\n        \n        // Calculate new viewBox position to zoom toward/away from mouse\n        const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n        const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n        \n        const newX = svgP.x - mouseXRatio * newWidth;\n        const newY = svgP.y - mouseYRatio * newHeight;\n        \n        setViewBox({\n            x: newX,\n            y: newY,\n            width: newWidth,\n            height: newHeight\n        });\n        \n        setScale(newScale);\n    };\n    \n    // Compute viewBox string\n    const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n    \n    return (\n        <div className={`visualizer ${isReduced ? 'reduced' : ''}`}>\n            <svg \n                ref={svgRef}\n                width=\"100%\" \n                height=\"100%\" \n                viewBox={viewBoxString}\n                onMouseDown={handleSvgMouseDown}\n                onMouseMove={handleSvgMouseMove}\n                onMouseUp={handleSvgMouseUp}\n                onMouseLeave={handleSvgMouseLeave}\n                onWheel={handleWheel}\n            >\n                {/* Grid background for visual reference */}\n                <defs>\n                    <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n                        <path d=\"M 50 0 L 0 0 0 50\" fill=\"none\" stroke=\"#f0f0f0\" strokeWidth=\"0.5\"/>\n                    </pattern>\n                </defs>\n                <rect width=\"2000\" height=\"2000\" fill=\"url(#grid)\" x=\"-500\" y=\"-500\" />\n                \n                {links.map((link, index) => {\n                    // Only render links if we have positions for both machines\n                    if (!positions[link.source] || !positions[link.target]) return null;\n                    \n                    return (\n                        <MachineLink\n                            key={index}\n                            sourceX={positions[link.source].x}\n                            sourceY={positions[link.source].y}\n                            targetX={positions[link.target].x}\n                            targetY={positions[link.target].y}\n                            type={link.type}\n                        />\n                    );\n                })}\n                \n                {machines.map(machine => {\n                    // Only render machines if we have positions for them\n                    if (!positions[machine.id]) return null;\n                    \n                    return (\n                        <g \n                            key={machine.id}\n                            onMouseDown={(e) => handleMachineDragStart(machine.id, e)}\n                        >\n                            <Machine\n                                machine={machine}\n                                x={positions[machine.id].x}\n                                y={positions[machine.id].y}\n                                onClick={() => onMachineClick(machine)}\n                            />\n                        </g>\n                    );\n                })}\n            </svg>\n            \n            {/* Zoom controls */}\n            <div className=\"visualizer-controls\">\n                <button \n                    onClick={() => setScale(prev => Math.min(5, prev * 1.2))}\n                    className=\"zoom-button\"\n                >\n                    +\n                </button>\n                <button \n                    onClick={() => setScale(prev => Math.max(0.5, prev / 1.2))}\n                    className=\"zoom-button\"\n                >\n                    -\n                </button>\n                <button \n                    onClick={() => {\n                        setViewBox({ x: 0, y: 0, width: 550, height: 350 });\n                        setScale(1);\n                    }}\n                    className=\"zoom-button\"\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Visualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}