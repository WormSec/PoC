{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Header from './components/Header';\nimport Visualizer from './components/Visualizer';\nimport Information from './components/Information';\nimport Footer from './components/Footer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedMachine, setSelectedMachine] = useState(null);\n  const [machinePositions, setMachinePositions] = useState({});\n  const [machines, setMachines] = useState([]);\n  const [links, setLinks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const visualizerRef = useRef(null);\n\n  // Function to generate links between machines\n  const generateLinks = machinesList => {\n    const generatedLinks = [];\n    for (let i = 0; i < machinesList.length; i++) {\n      for (let j = i + 1; j < machinesList.length; j++) {\n        if (machinesList[i].status === \"connected\" && machinesList[j].status === \"connected\") {\n          generatedLinks.push({\n            source: machinesList[i].id,\n            target: machinesList[j].id,\n            type: \"connected\"\n          });\n        } else {\n          generatedLinks.push({\n            source: machinesList[i].id,\n            target: machinesList[j].id,\n            type: \"isolated\"\n          });\n        }\n      }\n    }\n    return generatedLinks;\n  };\n\n  // Fetch machines data from API\n  const fetchMachines = async () => {\n    try {\n      setIsLoading(true);\n      // Replace with your actual API endpoint\n      const response = await fetch('/api/machines');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch machines: ${response.status}`);\n      }\n      const data = await response.json();\n      setMachines(data);\n\n      // Generate links based on the fetched machines\n      const newLinks = generateLinks(data);\n      setLinks(newLinks);\n\n      // Update selected machine if it exists\n      if (selectedMachine) {\n        const updatedSelectedMachine = data.find(m => m.id === selectedMachine.id) || null;\n        setSelectedMachine(updatedSelectedMachine);\n      }\n      setIsLoading(false);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n      setIsLoading(false);\n    }\n  };\n\n  // Initial fetch on component mount\n  useEffect(() => {\n    fetchMachines();\n\n    // Load saved positions on initial render\n    const savedPositions = localStorage.getItem('machinePositions');\n    if (savedPositions) {\n      try {\n        setMachinePositions(JSON.parse(savedPositions));\n      } catch (e) {\n        console.error('Failed to load saved positions', e);\n      }\n    }\n\n    // For demo purposes, if API is not available,\n    // initialize with sample data\n    const sampleMachines = [{\n      \"id\": \"1\",\n      \"name\": \"1\",\n      \"ip\": \"xxx.xxx.xxx.xxx\",\n      \"mac\": \"xx:xx:xx:xx:xx:xx\",\n      \"lastUpdate\": \"01/03/2025\",\n      \"status\": \"connected\"\n    }, {\n      \"id\": \"2\",\n      \"name\": \"2\",\n      \"ip\": \"xxx.xxx.xxx.xxx\",\n      \"mac\": \"xx:xx:xx:xx:xx:xx\",\n      \"lastUpdate\": \"28/02/2025\",\n      \"status\": \"isolated\"\n    }, {\n      \"id\": \"3\",\n      \"name\": \"3\",\n      \"ip\": \"xxx.xxx.xxx.xxx\",\n      \"mac\": \"xx:xx:xx:xx:xx:xx\",\n      \"lastUpdate\": \"02/03/2025\",\n      \"status\": \"connected\"\n    }, {\n      \"id\": \"4\",\n      \"name\": \"4\",\n      \"ip\": \"xxx.xxx.xxx.xxx\",\n      \"mac\": \"xx:xx:xx:xx:xx:xx\",\n      \"lastUpdate\": \"03/03/2025\",\n      \"status\": \"connected\"\n    }];\n    setMachines(sampleMachines);\n    setLinks(generateLinks(sampleMachines));\n    setIsLoading(false);\n  }, []);\n\n  // Set up polling for real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchMachines();\n    }, 10000); // Poll every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n  const handleMachineClick = machine => {\n    if (selectedMachine && selectedMachine.id === machine.id) {\n      setSelectedMachine(null);\n    } else {\n      setSelectedMachine(machine);\n    }\n  };\n\n  // Function to save positions when machines are moved\n  const updateMachinePositions = positions => {\n    setMachinePositions(positions);\n\n    // Save to localStorage for persistence\n    localStorage.setItem('machinePositions', JSON.stringify(positions));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [selectedMachine && /*#__PURE__*/_jsxDEV(Information, {\n        machine: selectedMachine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: visualizerRef,\n        style: {\n          flex: 1,\n          height: '100%'\n        },\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading machines...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchMachines,\n            children: \"Retry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Visualizer, {\n          machines: machines,\n          links: links,\n          onMachineClick: handleMachineClick,\n          isReduced: selectedMachine !== null,\n          initialPositions: machinePositions,\n          onPositionsChange: updateMachinePositions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0OzniJ2xhsPVEfUmRtuICPt6eA4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Header","Visualizer","Information","Footer","jsxDEV","_jsxDEV","App","_s","selectedMachine","setSelectedMachine","machinePositions","setMachinePositions","machines","setMachines","links","setLinks","isLoading","setIsLoading","error","setError","visualizerRef","generateLinks","machinesList","generatedLinks","i","length","j","status","push","source","id","target","type","fetchMachines","response","fetch","ok","Error","data","json","newLinks","updatedSelectedMachine","find","m","err","message","savedPositions","localStorage","getItem","JSON","parse","e","console","sampleMachines","interval","setInterval","clearInterval","handleMachineClick","machine","updateMachinePositions","positions","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","flex","height","onClick","onMachineClick","isReduced","initialPositions","onPositionsChange","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Header from './components/Header';\nimport Visualizer from './components/Visualizer';\nimport Information from './components/Information';\nimport Footer from './components/Footer';\nimport { Machine, Link } from './types';\nimport './App.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst App: React.FC = () => {\n  const [selectedMachine, setSelectedMachine] = useState<Machine | null>(null);\n  const [machinePositions, setMachinePositions] = useState<Record<string, Position>>({});\n  const [machines, setMachines] = useState<Machine[]>([]);\n  const [links, setLinks] = useState<Link[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const visualizerRef = useRef<HTMLDivElement>(null);\n  \n  // Function to generate links between machines\n  const generateLinks = (machinesList: Machine[]): Link[] => {\n    const generatedLinks: Link[] = [];\n    \n    for (let i = 0; i < machinesList.length; i++) {\n      for (let j = i + 1; j < machinesList.length; j++) {\n        if (machinesList[i].status === \"connected\" && machinesList[j].status === \"connected\") {\n          generatedLinks.push({ \n            source: machinesList[i].id, \n            target: machinesList[j].id,\n            type: \"connected\"\n          });\n        } else {\n          generatedLinks.push({ \n            source: machinesList[i].id, \n            target: machinesList[j].id,\n            type: \"isolated\"\n          });\n        }\n      }\n    }\n    \n    return generatedLinks;\n  };\n  \n  // Fetch machines data from API\n  const fetchMachines = async () => {\n    try {\n      setIsLoading(true);\n      // Replace with your actual API endpoint\n      const response = await fetch('/api/machines');\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch machines: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setMachines(data);\n      \n      // Generate links based on the fetched machines\n      const newLinks = generateLinks(data);\n      setLinks(newLinks);\n      \n      // Update selected machine if it exists\n      if (selectedMachine) {\n        const updatedSelectedMachine = data.find(m => m.id === selectedMachine.id) || null;\n        setSelectedMachine(updatedSelectedMachine);\n      }\n      \n      setIsLoading(false);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An unknown error occurred');\n      setIsLoading(false);\n    }\n  };\n  \n  // Initial fetch on component mount\n  useEffect(() => {\n    fetchMachines();\n    \n    // Load saved positions on initial render\n    const savedPositions = localStorage.getItem('machinePositions');\n    if (savedPositions) {\n      try {\n        setMachinePositions(JSON.parse(savedPositions));\n      } catch (e) {\n        console.error('Failed to load saved positions', e);\n      }\n    }\n    \n    // For demo purposes, if API is not available,\n    // initialize with sample data\n    const sampleMachines = [\n      { \"id\": \"1\", \"name\": \"1\", \"ip\": \"xxx.xxx.xxx.xxx\", \"mac\": \"xx:xx:xx:xx:xx:xx\", \"lastUpdate\": \"01/03/2025\", \"status\": \"connected\" },\n      { \"id\": \"2\", \"name\": \"2\", \"ip\": \"xxx.xxx.xxx.xxx\", \"mac\": \"xx:xx:xx:xx:xx:xx\", \"lastUpdate\": \"28/02/2025\", \"status\": \"isolated\" },\n      { \"id\": \"3\", \"name\": \"3\", \"ip\": \"xxx.xxx.xxx.xxx\", \"mac\": \"xx:xx:xx:xx:xx:xx\", \"lastUpdate\": \"02/03/2025\", \"status\": \"connected\" },\n      { \"id\": \"4\", \"name\": \"4\", \"ip\": \"xxx.xxx.xxx.xxx\", \"mac\": \"xx:xx:xx:xx:xx:xx\", \"lastUpdate\": \"03/03/2025\", \"status\": \"connected\" },\n    ];\n    \n    setMachines(sampleMachines);\n    setLinks(generateLinks(sampleMachines));\n    setIsLoading(false);\n  }, []);\n  \n  // Set up polling for real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchMachines();\n    }, 10000); // Poll every 10 seconds\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  const handleMachineClick = (machine: Machine) => {\n    if (selectedMachine && selectedMachine.id === machine.id) {\n      setSelectedMachine(null);\n    } else {\n      setSelectedMachine(machine);\n    }\n  };\n  \n  // Function to save positions when machines are moved\n  const updateMachinePositions = (positions: Record<string, Position>) => {\n    setMachinePositions(positions);\n    \n    // Save to localStorage for persistence\n    localStorage.setItem('machinePositions', JSON.stringify(positions));\n  };\n  \n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"main-content\">\n        {selectedMachine && (\n          <Information machine={selectedMachine} />\n        )}\n        <div \n          ref={visualizerRef} \n          style={{ flex: 1, height: '100%' }}\n        >\n          {isLoading ? (\n            <div className=\"loading-container\">\n              <div className=\"loading-spinner\"></div>\n              <p>Loading machines...</p>\n            </div>\n          ) : error ? (\n            <div className=\"error-container\">\n              <p>Error: {error}</p>\n              <button onClick={fetchMachines}>Retry</button>\n            </div>\n          ) : (\n            <Visualizer \n              machines={machines} \n              links={links} \n              onMachineClick={handleMachineClick}\n              isReduced={selectedMachine !== null}\n              initialPositions={machinePositions}\n              onPositionsChange={updateMachinePositions}\n            />\n          )}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}