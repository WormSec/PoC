{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer = ({\n  machines,\n  links,\n  onMachineClick,\n  isReduced,\n  initialPositions = {},\n  onPositionsChange\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [positions, setPositions] = useState({});\n  const [initialCirclePositions, setInitialCirclePositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [viewBox, setViewBox] = useState({\n    x: 0,\n    y: 0,\n    width: 550,\n    height: 350\n  });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPosition, setLastPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [scale, setScale] = useState(1);\n\n  // Calculate and store initial circle positions\n  useEffect(() => {\n    const centerX = 275;\n    const centerY = 175;\n    const radius = 100;\n    const circlePositions = {};\n    machines.forEach((machine, index) => {\n      const angle = index * 2 * Math.PI / machines.length;\n      circlePositions[machine.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n    setInitialCirclePositions(circlePositions);\n  }, [machines]);\n\n  // Initialize machine positions from props or in a circle layout\n  useEffect(() => {\n    if (Object.keys(initialPositions).length > 0) {\n      // Use provided positions if available\n      setPositions(prev => {\n        const newPositions = {\n          ...prev\n        };\n        machines.forEach(machine => {\n          if (initialPositions[machine.id]) {\n            newPositions[machine.id] = initialPositions[machine.id];\n          } else if (!newPositions[machine.id] && initialCirclePositions[machine.id]) {\n            // Fallback to circle position for new machines\n            newPositions[machine.id] = initialCirclePositions[machine.id];\n          }\n        });\n        return newPositions;\n      });\n    } else if (Object.keys(initialCirclePositions).length > 0) {\n      // Use circle layout if no positions provided\n      setPositions(prev => {\n        const newPositions = {\n          ...prev\n        };\n        machines.forEach(machine => {\n          if (!newPositions[machine.id] && initialCirclePositions[machine.id]) {\n            newPositions[machine.id] = initialCirclePositions[machine.id];\n          }\n        });\n        return newPositions;\n      });\n    }\n  }, [machines, initialPositions, initialCirclePositions]);\n\n  // Notify parent component when positions change\n  useEffect(() => {\n    if (onPositionsChange && Object.keys(positions).length > 0) {\n      onPositionsChange(positions);\n    }\n  }, [positions, onPositionsChange]);\n\n  // Handle mouse down on SVG for panning\n  const handleSvgMouseDown = e => {\n    if (e.button === 0 && !dragging) {\n      // Left click and not dragging a machine\n      setIsPanning(true);\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse move for panning and dragging\n  const handleSvgMouseMove = e => {\n    if (dragging) {\n      var _svg$getScreenCTM;\n      // We're dragging a machine\n      const svg = svgRef.current;\n      if (!svg) return;\n      const point = svg.createSVGPoint();\n      point.x = e.clientX;\n      point.y = e.clientY;\n\n      // Convert client coordinates to SVG coordinates\n      const svgP = point.matrixTransform((_svg$getScreenCTM = svg.getScreenCTM()) === null || _svg$getScreenCTM === void 0 ? void 0 : _svg$getScreenCTM.inverse());\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: svgP.x,\n          y: svgP.y\n        }\n      }));\n    } else if (isPanning) {\n      // We're panning the view\n      const dx = e.clientX - lastPosition.x;\n      const dy = e.clientY - lastPosition.y;\n\n      // Adjust based on current scale\n      const panSpeed = 1 / scale;\n      setViewBox(prev => ({\n        ...prev,\n        x: prev.x - dx * panSpeed,\n        y: prev.y - dy * panSpeed\n      }));\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse up for ending panning and dragging\n  const handleSvgMouseUp = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle mouse leave for ending panning and dragging\n  const handleSvgMouseLeave = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle machine drag start\n  const handleMachineDragStart = (id, e) => {\n    e.stopPropagation(); // Prevent SVG from starting a pan operation\n    setDragging(id);\n  };\n\n  // Handle zoom with mouse wheel\n  const handleWheel = e => {\n    var _svg$getScreenCTM2;\n    e.preventDefault();\n    const svg = svgRef.current;\n    if (!svg) return;\n\n    // Get mouse position in SVG coordinates\n    const point = svg.createSVGPoint();\n    point.x = e.clientX;\n    point.y = e.clientY;\n    const svgP = point.matrixTransform((_svg$getScreenCTM2 = svg.getScreenCTM()) === null || _svg$getScreenCTM2 === void 0 ? void 0 : _svg$getScreenCTM2.inverse());\n\n    // Calculate new scale\n    const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n    const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n\n    // Calculate new viewBox dimensions\n    const newWidth = viewBox.width * (newScale / scale);\n    const newHeight = viewBox.height * (newScale / scale);\n\n    // Calculate new viewBox position to zoom toward/away from mouse\n    const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n    const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n    const newX = svgP.x - mouseXRatio * newWidth;\n    const newY = svgP.y - mouseYRatio * newHeight;\n    setViewBox({\n      x: newX,\n      y: newY,\n      width: newWidth,\n      height: newHeight\n    });\n    setScale(newScale);\n  };\n\n  // Handle zoom in button\n  const handleZoomIn = () => {\n    setScale(prev => {\n      const newScale = Math.min(5, prev * 1.2);\n\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Handle zoom out button\n  const handleZoomOut = () => {\n    setScale(prev => {\n      const newScale = Math.max(0.5, prev / 1.2);\n\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Reset only machine positions to initial circle layout\n  const handleResetPositions = () => {\n    if (initialCirclePositions) {\n      setPositions({\n        ...initialCirclePositions\n      });\n    }\n  };\n\n  // Compute viewBox string\n  const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `visualizer ${isReduced ? 'reduced' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: viewBoxString,\n      onMouseDown: handleSvgMouseDown,\n      onMouseMove: handleSvgMouseMove,\n      onMouseUp: handleSvgMouseUp,\n      onMouseLeave: handleSvgMouseLeave,\n      onWheel: handleWheel,\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n          id: \"grid\",\n          width: \"50\",\n          height: \"50\",\n          patternUnits: \"userSpaceOnUse\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M 50 0 L 0 0 0 50\",\n            fill: \"none\",\n            stroke: \"#f0f0f0\",\n            strokeWidth: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        width: \"2000\",\n        height: \"2000\",\n        fill: \"url(#grid)\",\n        x: \"-500\",\n        y: \"-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), links.map((link, index) => {\n        // Only render links if we have positions for both machines\n        if (!positions[link.source] || !positions[link.target]) return null;\n        return /*#__PURE__*/_jsxDEV(MachineLink, {\n          sourceX: positions[link.source].x,\n          sourceY: positions[link.source].y,\n          targetX: positions[link.target].x,\n          targetY: positions[link.target].y,\n          type: link.type\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this);\n      }), machines.map(machine => {\n        // Only render machines if we have positions for them\n        if (!positions[machine.id]) return null;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          onMouseDown: e => handleMachineDragStart(machine.id, e),\n          children: /*#__PURE__*/_jsxDEV(Machine, {\n            machine: machine,\n            x: positions[machine.id].x,\n            y: positions[machine.id].y,\n            onClick: () => onMachineClick(machine)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this)\n        }, machine.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        className: \"zoom-button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        className: \"zoom-button\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResetPositions,\n        className: \"zoom-button reset-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 9\n  }, this);\n};\n_s(Visualizer, \"QSIy9fA8mc4TfDoavFfipNfEx1A=\");\n_c = Visualizer;\nexport default Visualizer;\nvar _c;\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Machine","MachineLink","jsxDEV","_jsxDEV","Visualizer","machines","links","onMachineClick","isReduced","initialPositions","onPositionsChange","_s","svgRef","positions","setPositions","initialCirclePositions","setInitialCirclePositions","dragging","setDragging","viewBox","setViewBox","x","y","width","height","isPanning","setIsPanning","lastPosition","setLastPosition","scale","setScale","centerX","centerY","radius","circlePositions","forEach","machine","index","angle","Math","PI","length","id","cos","sin","Object","keys","prev","newPositions","handleSvgMouseDown","e","button","clientX","clientY","handleSvgMouseMove","_svg$getScreenCTM","svg","current","point","createSVGPoint","svgP","matrixTransform","getScreenCTM","inverse","dx","dy","panSpeed","handleSvgMouseUp","handleSvgMouseLeave","handleMachineDragStart","stopPropagation","handleWheel","_svg$getScreenCTM2","preventDefault","zoomFactor","deltaY","newScale","max","min","newWidth","newHeight","mouseXRatio","mouseYRatio","newX","newY","handleZoomIn","handleZoomOut","handleResetPositions","viewBoxString","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","patternUnits","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","map","link","source","target","sourceX","sourceY","targetX","targetY","type","onClick","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport { Machine as MachineType, Link } from '../types';\nimport './Visualizer.css';\n\ninterface VisualizerProps {\n    machines: MachineType[];\n    links: Link[];\n    onMachineClick: (machine: MachineType) => void;\n    isReduced: boolean;\n    initialPositions?: Record<string, Position>;\n    onPositionsChange?: (positions: Record<string, Position>) => void;\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst Visualizer: React.FC<VisualizerProps> = ({ \n    machines, \n    links, \n    onMachineClick,\n    isReduced,\n    initialPositions = {},\n    onPositionsChange\n}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n    const [positions, setPositions] = useState<Record<string, Position>>({});\n    const [initialCirclePositions, setInitialCirclePositions] = useState<Record<string, Position>>({});\n    const [dragging, setDragging] = useState<string | null>(null);\n    const [viewBox, setViewBox] = useState({ x: 0, y: 0, width: 550, height: 350 });\n    const [isPanning, setIsPanning] = useState(false);\n    const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n    const [scale, setScale] = useState(1);\n    \n    // Calculate and store initial circle positions\n    useEffect(() => {\n        const centerX = 275;\n        const centerY = 175;\n        const radius = 100;\n        \n        const circlePositions: Record<string, Position> = {};\n        machines.forEach((machine, index) => {\n            const angle = (index * 2 * Math.PI) / machines.length;\n            circlePositions[machine.id] = {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        });\n        \n        setInitialCirclePositions(circlePositions);\n    }, [machines]);\n    \n    // Initialize machine positions from props or in a circle layout\n    useEffect(() => {\n        if (Object.keys(initialPositions).length > 0) {\n            // Use provided positions if available\n            setPositions(prev => {\n                const newPositions = { ...prev };\n                \n                machines.forEach(machine => {\n                    if (initialPositions[machine.id]) {\n                        newPositions[machine.id] = initialPositions[machine.id];\n                    } else if (!newPositions[machine.id] && initialCirclePositions[machine.id]) {\n                        // Fallback to circle position for new machines\n                        newPositions[machine.id] = initialCirclePositions[machine.id];\n                    }\n                });\n                \n                return newPositions;\n            });\n        } else if (Object.keys(initialCirclePositions).length > 0) {\n            // Use circle layout if no positions provided\n            setPositions(prev => {\n                const newPositions = { ...prev };\n                \n                machines.forEach(machine => {\n                    if (!newPositions[machine.id] && initialCirclePositions[machine.id]) {\n                        newPositions[machine.id] = initialCirclePositions[machine.id];\n                    }\n                });\n                \n                return newPositions;\n            });\n        }\n    }, [machines, initialPositions, initialCirclePositions]);\n    \n    // Notify parent component when positions change\n    useEffect(() => {\n        if (onPositionsChange && Object.keys(positions).length > 0) {\n            onPositionsChange(positions);\n        }\n    }, [positions, onPositionsChange]);\n    \n    // Handle mouse down on SVG for panning\n    const handleSvgMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0 && !dragging) { // Left click and not dragging a machine\n            setIsPanning(true);\n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse move for panning and dragging\n    const handleSvgMouseMove = (e: React.MouseEvent) => {\n        if (dragging) {\n            // We're dragging a machine\n            const svg = svgRef.current;\n            if (!svg) return;\n            \n            const point = svg.createSVGPoint();\n            point.x = e.clientX;\n            point.y = e.clientY;\n            \n            // Convert client coordinates to SVG coordinates\n            const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n            \n            setPositions(prev => ({\n                ...prev,\n                [dragging]: {\n                    x: svgP.x,\n                    y: svgP.y\n                }\n            }));\n        } else if (isPanning) {\n            // We're panning the view\n            const dx = e.clientX - lastPosition.x;\n            const dy = e.clientY - lastPosition.y;\n            \n            // Adjust based on current scale\n            const panSpeed = 1 / scale;\n            \n            setViewBox(prev => ({\n                ...prev,\n                x: prev.x - dx * panSpeed,\n                y: prev.y - dy * panSpeed\n            }));\n            \n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse up for ending panning and dragging\n    const handleSvgMouseUp = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle mouse leave for ending panning and dragging\n    const handleSvgMouseLeave = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle machine drag start\n    const handleMachineDragStart = (id: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent SVG from starting a pan operation\n        setDragging(id);\n    };\n    \n    // Handle zoom with mouse wheel\n    const handleWheel = (e: React.WheelEvent) => {\n        e.preventDefault();\n        \n        const svg = svgRef.current;\n        if (!svg) return;\n        \n        // Get mouse position in SVG coordinates\n        const point = svg.createSVGPoint();\n        point.x = e.clientX;\n        point.y = e.clientY;\n        const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n        \n        // Calculate new scale\n        const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n        const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n        \n        // Calculate new viewBox dimensions\n        const newWidth = viewBox.width * (newScale / scale);\n        const newHeight = viewBox.height * (newScale / scale);\n        \n        // Calculate new viewBox position to zoom toward/away from mouse\n        const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n        const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n        \n        const newX = svgP.x - mouseXRatio * newWidth;\n        const newY = svgP.y - mouseYRatio * newHeight;\n        \n        setViewBox({\n            x: newX,\n            y: newY,\n            width: newWidth,\n            height: newHeight\n        });\n        \n        setScale(newScale);\n    };\n    \n    // Handle zoom in button\n    const handleZoomIn = () => {\n        setScale(prev => {\n            const newScale = Math.min(5, prev * 1.2);\n            \n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                \n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                \n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            \n            return newScale;\n        });\n    };\n    \n    // Handle zoom out button\n    const handleZoomOut = () => {\n        setScale(prev => {\n            const newScale = Math.max(0.5, prev / 1.2);\n            \n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                \n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                \n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            \n            return newScale;\n        });\n    };\n    \n    // Reset only machine positions to initial circle layout\n    const handleResetPositions = () => {\n        if (initialCirclePositions) {\n            setPositions({ ...initialCirclePositions });\n        }\n    };\n    \n    // Compute viewBox string\n    const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n    \n    return (\n        <div className={`visualizer ${isReduced ? 'reduced' : ''}`}>\n            <svg \n                ref={svgRef}\n                width=\"100%\" \n                height=\"100%\" \n                viewBox={viewBoxString}\n                onMouseDown={handleSvgMouseDown}\n                onMouseMove={handleSvgMouseMove}\n                onMouseUp={handleSvgMouseUp}\n                onMouseLeave={handleSvgMouseLeave}\n                onWheel={handleWheel}\n            >\n                {/* Grid background for visual reference */}\n                <defs>\n                    <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n                        <path d=\"M 50 0 L 0 0 0 50\" fill=\"none\" stroke=\"#f0f0f0\" strokeWidth=\"0.5\"/>\n                    </pattern>\n                </defs>\n                <rect width=\"2000\" height=\"2000\" fill=\"url(#grid)\" x=\"-500\" y=\"-500\" />\n                \n                {links.map((link, index) => {\n                    // Only render links if we have positions for both machines\n                    if (!positions[link.source] || !positions[link.target]) return null;\n                    \n                    return (\n                        <MachineLink\n                            key={index}\n                            sourceX={positions[link.source].x}\n                            sourceY={positions[link.source].y}\n                            targetX={positions[link.target].x}\n                            targetY={positions[link.target].y}\n                            type={link.type}\n                        />\n                    );\n                })}\n                \n                {machines.map(machine => {\n                    // Only render machines if we have positions for them\n                    if (!positions[machine.id]) return null;\n                    \n                    return (\n                        <g \n                            key={machine.id}\n                            onMouseDown={(e) => handleMachineDragStart(machine.id, e)}\n                        >\n                            <Machine\n                                machine={machine}\n                                x={positions[machine.id].x}\n                                y={positions[machine.id].y}\n                                onClick={() => onMachineClick(machine)}\n                            />\n                        </g>\n                    );\n                })}\n            </svg>\n            \n            {/* Zoom controls */}\n            <div className=\"visualizer-controls\">\n                <button \n                    onClick={handleZoomIn}\n                    className=\"zoom-button\"\n                >\n                    +\n                </button>\n                <button \n                    onClick={handleZoomOut}\n                    className=\"zoom-button\"\n                >\n                    -\n                </button>\n                <button \n                    onClick={handleResetPositions}\n                    className=\"zoom-button reset-button\"\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Visualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}