{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer = ({\n  machines,\n  links,\n  onMachineClick,\n  isReduced,\n  initialPositions,\n  onPositionsChange\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [viewBox, setViewBox] = useState({\n    x: 0,\n    y: 0,\n    width: 550,\n    height: 350\n  });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPosition, setLastPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [scale, setScale] = useState(1);\n\n  // Calculate initial positions in a circle - memoized with useCallback\n  const calculateCirclePositions = useCallback(() => {\n    const centerX = 275;\n    const centerY = 175;\n    const radius = 100;\n    const circlePositions = {};\n    machines.forEach((machine, index) => {\n      const angle = index * 2 * Math.PI / machines.length;\n      circlePositions[machine.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n    return circlePositions;\n  }, [machines]);\n\n  // Initialize machine positions\n  useEffect(() => {\n    // Use initial positions if provided, otherwise calculate circle positions\n    if (initialPositions && Object.keys(initialPositions).length > 0) {\n      setPositions(initialPositions);\n    } else {\n      const freshCirclePositions = calculateCirclePositions();\n      setPositions(freshCirclePositions);\n    }\n  }, [initialPositions, calculateCirclePositions]);\n\n  // Update positions when new machines are added\n  useEffect(() => {\n    const freshCirclePositions = calculateCirclePositions();\n\n    // Only set positions for machines that don't have them yet\n    setPositions(prev => {\n      const updatedPositions = {\n        ...prev\n      };\n      machines.forEach(machine => {\n        if (!updatedPositions[machine.id]) {\n          updatedPositions[machine.id] = freshCirclePositions[machine.id];\n        }\n      });\n      return updatedPositions;\n    });\n  }, [machines, calculateCirclePositions]);\n\n  // Handle mouse down on SVG for panning\n  const handleSvgMouseDown = e => {\n    if (e.button === 0 && !dragging) {\n      // Left click and not dragging a machine\n      setIsPanning(true);\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse move for panning and dragging\n  const handleSvgMouseMove = e => {\n    if (dragging) {\n      var _svg$getScreenCTM;\n      // We're dragging a machine\n      const svg = svgRef.current;\n      if (!svg) return;\n      const point = svg.createSVGPoint();\n      point.x = e.clientX;\n      point.y = e.clientY;\n\n      // Convert client coordinates to SVG coordinates\n      const svgP = point.matrixTransform((_svg$getScreenCTM = svg.getScreenCTM()) === null || _svg$getScreenCTM === void 0 ? void 0 : _svg$getScreenCTM.inverse());\n      const newPositions = {\n        ...positions,\n        [dragging]: {\n          x: svgP.x,\n          y: svgP.y\n        }\n      };\n      setPositions(newPositions);\n\n      // Call the callback if provided\n      if (onPositionsChange) {\n        onPositionsChange(newPositions);\n      }\n    } else if (isPanning) {\n      // We're panning the view\n      const dx = e.clientX - lastPosition.x;\n      const dy = e.clientY - lastPosition.y;\n\n      // Adjust based on current scale\n      const panSpeed = 1 / scale;\n      setViewBox(prev => ({\n        ...prev,\n        x: prev.x - dx * panSpeed,\n        y: prev.y - dy * panSpeed\n      }));\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse up for ending panning and dragging\n  const handleSvgMouseUp = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle mouse leave for ending panning and dragging\n  const handleSvgMouseLeave = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle machine drag start\n  const handleMachineDragStart = (id, e) => {\n    e.stopPropagation(); // Prevent SVG from starting a pan operation\n    setDragging(id);\n  };\n\n  // Handle zoom with mouse wheel\n  const handleWheel = e => {\n    var _svg$getScreenCTM2;\n    e.preventDefault();\n    const svg = svgRef.current;\n    if (!svg) return;\n\n    // Get mouse position in SVG coordinates\n    const point = svg.createSVGPoint();\n    point.x = e.clientX;\n    point.y = e.clientY;\n    const svgP = point.matrixTransform((_svg$getScreenCTM2 = svg.getScreenCTM()) === null || _svg$getScreenCTM2 === void 0 ? void 0 : _svg$getScreenCTM2.inverse());\n\n    // Calculate new scale\n    const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n    const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n\n    // Calculate new viewBox dimensions\n    const newWidth = viewBox.width * (scale / newScale);\n    const newHeight = viewBox.height * (scale / newScale);\n\n    // Calculate new viewBox position to zoom toward/away from mouse\n    const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n    const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n    const newX = svgP.x - mouseXRatio * newWidth;\n    const newY = svgP.y - mouseYRatio * newHeight;\n    setViewBox({\n      x: newX,\n      y: newY,\n      width: newWidth,\n      height: newHeight\n    });\n    setScale(newScale);\n  };\n\n  // Handle zoom in button\n  const handleZoomIn = () => {\n    setScale(prev => {\n      const newScale = Math.min(5, prev * 1.2);\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Handle zoom out button\n  const handleZoomOut = () => {\n    setScale(prev => {\n      const newScale = Math.max(0.5, prev / 1.2);\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Handle reset button\n  const handleResetPositions = () => {\n    // Calculate fresh circle positions to ensure consistency\n    const freshCirclePositions = calculateCirclePositions();\n    setPositions(freshCirclePositions);\n\n    // Also update in localStorage via the callback\n    if (onPositionsChange) {\n      onPositionsChange(freshCirclePositions);\n    }\n\n    // Reset viewBox and scale\n    setViewBox({\n      x: 0,\n      y: 0,\n      width: 550,\n      height: 350\n    });\n    setScale(1);\n  };\n\n  // Compute viewBox string\n  const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `visualizer ${isReduced ? 'reduced' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: viewBoxString,\n      onMouseDown: handleSvgMouseDown,\n      onMouseMove: handleSvgMouseMove,\n      onMouseUp: handleSvgMouseUp,\n      onMouseLeave: handleSvgMouseLeave,\n      onWheel: handleWheel,\n      children: [links.map((link, index) => {\n        // Only render links if we have positions for both machines\n        if (!positions[link.source] || !positions[link.target]) return null;\n        return /*#__PURE__*/_jsxDEV(MachineLink, {\n          sourceX: positions[link.source].x,\n          sourceY: positions[link.source].y,\n          targetX: positions[link.target].x,\n          targetY: positions[link.target].y,\n          type: link.type\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }, this);\n      }), machines.map(machine => {\n        // Only render machines if we have positions for them\n        if (!positions[machine.id]) return null;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          onMouseDown: e => handleMachineDragStart(machine.id, e),\n          children: /*#__PURE__*/_jsxDEV(Machine, {\n            machine: machine,\n            x: positions[machine.id].x,\n            y: positions[machine.id].y,\n            onClick: () => onMachineClick(machine)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 29\n          }, this)\n        }, machine.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        className: \"zoom-button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        className: \"zoom-button\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResetPositions,\n        className: \"zoom-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n};\n_s(Visualizer, \"egX29Hbhaa4cm4JVMo+h3IbRzRE=\");\n_c = Visualizer;\nexport default Visualizer;\nvar _c;\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","Machine","MachineLink","jsxDEV","_jsxDEV","Visualizer","machines","links","onMachineClick","isReduced","initialPositions","onPositionsChange","_s","svgRef","positions","setPositions","dragging","setDragging","viewBox","setViewBox","x","y","width","height","isPanning","setIsPanning","lastPosition","setLastPosition","scale","setScale","calculateCirclePositions","centerX","centerY","radius","circlePositions","forEach","machine","index","angle","Math","PI","length","id","cos","sin","Object","keys","freshCirclePositions","prev","updatedPositions","handleSvgMouseDown","e","button","clientX","clientY","handleSvgMouseMove","_svg$getScreenCTM","svg","current","point","createSVGPoint","svgP","matrixTransform","getScreenCTM","inverse","newPositions","dx","dy","panSpeed","handleSvgMouseUp","handleSvgMouseLeave","handleMachineDragStart","stopPropagation","handleWheel","_svg$getScreenCTM2","preventDefault","zoomFactor","deltaY","newScale","max","min","newWidth","newHeight","mouseXRatio","mouseYRatio","newX","newY","handleZoomIn","handleZoomOut","handleResetPositions","viewBoxString","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","map","link","source","target","sourceX","sourceY","targetX","targetY","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport { Machine as MachineType, Link } from '../types';\nimport './Visualizer.css';\n\ninterface VisualizerProps {\n    machines: MachineType[];\n    links: Link[];\n    onMachineClick: (machine: MachineType) => void;\n    isReduced: boolean;\n    initialPositions?: Record<string, Position>;\n    onPositionsChange?: (positions: Record<string, Position>) => void;\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst Visualizer: React.FC<VisualizerProps> = ({ \n    machines, \n    links, \n    onMachineClick,\n    isReduced,\n    initialPositions,\n    onPositionsChange\n}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n    const [positions, setPositions] = useState<Record<string, Position>>({});\n    const [dragging, setDragging] = useState<string | null>(null);\n    const [viewBox, setViewBox] = useState({ x: 0, y: 0, width: 550, height: 350 });\n    const [isPanning, setIsPanning] = useState(false);\n    const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n    const [scale, setScale] = useState(1);\n    \n    // Calculate initial positions in a circle - memoized with useCallback\n    const calculateCirclePositions = useCallback(() => {\n        const centerX = 275;\n        const centerY = 175;\n        const radius = 100;\n        \n        const circlePositions: Record<string, Position> = {};\n        machines.forEach((machine, index) => {\n            const angle = (index * 2 * Math.PI) / machines.length;\n            circlePositions[machine.id] = {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        });\n        \n        return circlePositions;\n    }, [machines]);\n    \n    // Initialize machine positions\n    useEffect(() => {\n        // Use initial positions if provided, otherwise calculate circle positions\n        if (initialPositions && Object.keys(initialPositions).length > 0) {\n            setPositions(initialPositions);\n        } else {\n            const freshCirclePositions = calculateCirclePositions();\n            setPositions(freshCirclePositions);\n        }\n    }, [initialPositions, calculateCirclePositions]);\n    \n    // Update positions when new machines are added\n    useEffect(() => {\n        const freshCirclePositions = calculateCirclePositions();\n        \n        // Only set positions for machines that don't have them yet\n        setPositions(prev => {\n            const updatedPositions = { ...prev };\n            machines.forEach(machine => {\n                if (!updatedPositions[machine.id]) {\n                    updatedPositions[machine.id] = freshCirclePositions[machine.id];\n                }\n            });\n            \n            return updatedPositions;\n        });\n    }, [machines, calculateCirclePositions]);\n    \n    // Handle mouse down on SVG for panning\n    const handleSvgMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0 && !dragging) { // Left click and not dragging a machine\n            setIsPanning(true);\n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse move for panning and dragging\n    const handleSvgMouseMove = (e: React.MouseEvent) => {\n        if (dragging) {\n            // We're dragging a machine\n            const svg = svgRef.current;\n            if (!svg) return;\n            \n            const point = svg.createSVGPoint();\n            point.x = e.clientX;\n            point.y = e.clientY;\n            \n            // Convert client coordinates to SVG coordinates\n            const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n            \n            const newPositions = {\n                ...positions,\n                [dragging]: {\n                    x: svgP.x,\n                    y: svgP.y\n                }\n            };\n            \n            setPositions(newPositions);\n            \n            // Call the callback if provided\n            if (onPositionsChange) {\n                onPositionsChange(newPositions);\n            }\n        } else if (isPanning) {\n            // We're panning the view\n            const dx = e.clientX - lastPosition.x;\n            const dy = e.clientY - lastPosition.y;\n            \n            // Adjust based on current scale\n            const panSpeed = 1 / scale;\n            \n            setViewBox(prev => ({\n                ...prev,\n                x: prev.x - dx * panSpeed,\n                y: prev.y - dy * panSpeed\n            }));\n            \n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse up for ending panning and dragging\n    const handleSvgMouseUp = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle mouse leave for ending panning and dragging\n    const handleSvgMouseLeave = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle machine drag start\n    const handleMachineDragStart = (id: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent SVG from starting a pan operation\n        setDragging(id);\n    };\n    \n    // Handle zoom with mouse wheel\n    const handleWheel = (e: React.WheelEvent) => {\n        e.preventDefault();\n        \n        const svg = svgRef.current;\n        if (!svg) return;\n        \n        // Get mouse position in SVG coordinates\n        const point = svg.createSVGPoint();\n        point.x = e.clientX;\n        point.y = e.clientY;\n        const svgP = point.matrixTransform(svg.getScreenCTM()?.inverse());\n        \n        // Calculate new scale\n        const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n        const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n        \n        // Calculate new viewBox dimensions\n        const newWidth = viewBox.width * (scale / newScale);\n        const newHeight = viewBox.height * (scale / newScale);\n        \n        // Calculate new viewBox position to zoom toward/away from mouse\n        const mouseXRatio = (svgP.x - viewBox.x) / viewBox.width;\n        const mouseYRatio = (svgP.y - viewBox.y) / viewBox.height;\n        \n        const newX = svgP.x - mouseXRatio * newWidth;\n        const newY = svgP.y - mouseYRatio * newHeight;\n        \n        setViewBox({\n            x: newX,\n            y: newY,\n            width: newWidth,\n            height: newHeight\n        });\n        \n        setScale(newScale);\n    };\n    \n    // Handle zoom in button\n    const handleZoomIn = () => {\n        setScale(prev => {\n            const newScale = Math.min(5, prev * 1.2);\n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            return newScale;\n        });\n    };\n    \n    // Handle zoom out button\n    const handleZoomOut = () => {\n        setScale(prev => {\n            const newScale = Math.max(0.5, prev / 1.2);\n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            return newScale;\n        });\n    };\n    \n    // Handle reset button\n    const handleResetPositions = () => {\n        // Calculate fresh circle positions to ensure consistency\n        const freshCirclePositions = calculateCirclePositions();\n        setPositions(freshCirclePositions);\n        \n        // Also update in localStorage via the callback\n        if (onPositionsChange) {\n            onPositionsChange(freshCirclePositions);\n        }\n        \n        // Reset viewBox and scale\n        setViewBox({ x: 0, y: 0, width: 550, height: 350 });\n        setScale(1);\n    };\n    \n    // Compute viewBox string\n    const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n    \n    return (\n        <div className={`visualizer ${isReduced ? 'reduced' : ''}`}>\n            <svg \n                ref={svgRef}\n                width=\"100%\" \n                height=\"100%\" \n                viewBox={viewBoxString}\n                onMouseDown={handleSvgMouseDown}\n                onMouseMove={handleSvgMouseMove}\n                onMouseUp={handleSvgMouseUp}\n                onMouseLeave={handleSvgMouseLeave}\n                onWheel={handleWheel}\n            >\n                {links.map((link, index) => {\n                    // Only render links if we have positions for both machines\n                    if (!positions[link.source] || !positions[link.target]) return null;\n                    \n                    return (\n                        <MachineLink\n                            key={index}\n                            sourceX={positions[link.source].x}\n                            sourceY={positions[link.source].y}\n                            targetX={positions[link.target].x}\n                            targetY={positions[link.target].y}\n                            type={link.type}\n                        />\n                    );\n                })}\n                \n                {machines.map(machine => {\n                    // Only render machines if we have positions for them\n                    if (!positions[machine.id]) return null;\n                    \n                    return (\n                        <g \n                            key={machine.id}\n                            onMouseDown={(e) => handleMachineDragStart(machine.id, e)}\n                        >\n                            <Machine\n                                machine={machine}\n                                x={positions[machine.id].x}\n                                y={positions[machine.id].y}\n                                onClick={() => onMachineClick(machine)}\n                            />\n                        </g>\n                    );\n                })}\n            </svg>\n            \n            {/* Zoom controls - positioned in bottom right */}\n            <div className=\"visualizer-controls\">\n                <button \n                    onClick={handleZoomIn}\n                    className=\"zoom-button\"\n                >\n                    +\n                </button>\n                <button \n                    onClick={handleZoomOut}\n                    className=\"zoom-button\"\n                >\n                    -\n                </button>\n                <button \n                    onClick={handleResetPositions}\n                    className=\"zoom-button\"\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Visualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}