{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport './Visualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer = ({\n  machines,\n  links,\n  onMachineClick,\n  isReduced,\n  initialPositions = {},\n  onPositionsChange\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [positions, setPositions] = useState({});\n  const [circlePositions, setCirclePositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [viewBox, setViewBox] = useState({\n    x: 0,\n    y: 0,\n    width: 550,\n    height: 350\n  });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPosition, setLastPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [scale, setScale] = useState(1);\n\n  // Calculate and store circle positions\n  useEffect(() => {\n    const centerX = 275;\n    const centerY = 175;\n    const radius = 100;\n    const newCirclePositions = {};\n    machines.forEach((machine, index) => {\n      const angle = index * 2 * Math.PI / machines.length;\n      newCirclePositions[machine.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n    setCirclePositions(newCirclePositions);\n  }, [machines]);\n\n  // Initialize machine positions from props or in a circle layout\n  useEffect(() => {\n    if (Object.keys(initialPositions).length > 0) {\n      // Use provided positions if available\n      setPositions(prev => {\n        const newPositions = {\n          ...prev\n        };\n        machines.forEach(machine => {\n          if (initialPositions[machine.id]) {\n            newPositions[machine.id] = initialPositions[machine.id];\n          } else if (!newPositions[machine.id] && circlePositions[machine.id]) {\n            // Fallback to circle position for new machines\n            newPositions[machine.id] = circlePositions[machine.id];\n          }\n        });\n        return newPositions;\n      });\n    } else if (Object.keys(circlePositions).length > 0) {\n      // Use circle layout if no positions provided\n      setPositions(circlePositions);\n    }\n  }, [machines, initialPositions, circlePositions]);\n\n  // Notify parent component when positions change\n  useEffect(() => {\n    if (onPositionsChange && Object.keys(positions).length > 0) {\n      onPositionsChange(positions);\n    }\n  }, [positions, onPositionsChange]);\n\n  // Handle mouse down on SVG for panning\n  const handleSvgMouseDown = e => {\n    if (e.button === 0 && !dragging) {\n      // Left click and not dragging a machine\n      setIsPanning(true);\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Get SVG coordinates from client coordinates\n  const clientToSvgCoordinates = (clientX, clientY) => {\n    const svg = svgRef.current;\n    if (!svg) return {\n      x: 0,\n      y: 0\n    };\n    const point = svg.createSVGPoint();\n    point.x = clientX;\n    point.y = clientY;\n\n    // Convert client coordinates to SVG coordinates\n    const ctm = svg.getScreenCTM();\n    if (!ctm) return {\n      x: 0,\n      y: 0\n    };\n    const svgPoint = point.matrixTransform(ctm.inverse());\n    return {\n      x: svgPoint.x,\n      y: svgPoint.y\n    };\n  };\n\n  // Handle mouse move for panning and dragging\n  const handleSvgMouseMove = e => {\n    if (dragging) {\n      // We're dragging a machine\n      const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: svgCoords.x - dragOffset.x,\n          y: svgCoords.y - dragOffset.y\n        }\n      }));\n    } else if (isPanning) {\n      // We're panning the view\n      const dx = e.clientX - lastPosition.x;\n      const dy = e.clientY - lastPosition.y;\n\n      // Adjust based on current scale\n      const panSpeed = 1 / scale;\n      setViewBox(prev => ({\n        ...prev,\n        x: prev.x - dx * panSpeed,\n        y: prev.y - dy * panSpeed\n      }));\n      setLastPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle mouse up for ending panning and dragging\n  const handleSvgMouseUp = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle mouse leave for ending panning and dragging\n  const handleSvgMouseLeave = () => {\n    setIsPanning(false);\n    setDragging(null);\n  };\n\n  // Handle machine drag start\n  const handleMachineDragStart = (id, e) => {\n    e.stopPropagation(); // Prevent SVG from starting a pan operation\n\n    const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n    const machinePos = positions[id];\n\n    // Calculate offset to prevent jump on initial drag\n    setDragOffset({\n      x: svgCoords.x - machinePos.x,\n      y: svgCoords.y - machinePos.y\n    });\n    setDragging(id);\n  };\n\n  // Handle zoom with mouse wheel\n  const handleWheel = e => {\n    e.preventDefault();\n    const svg = svgRef.current;\n    if (!svg) return;\n\n    // Get mouse position in SVG coordinates\n    const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n\n    // Calculate new scale\n    const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n    const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n\n    // Calculate new viewBox dimensions\n    const newWidth = viewBox.width * (newScale / scale);\n    const newHeight = viewBox.height * (newScale / scale);\n\n    // Calculate new viewBox position to zoom toward/away from mouse\n    const mouseXRatio = (svgCoords.x - viewBox.x) / viewBox.width;\n    const mouseYRatio = (svgCoords.y - viewBox.y) / viewBox.height;\n    const newX = svgCoords.x - mouseXRatio * newWidth;\n    const newY = svgCoords.y - mouseYRatio * newHeight;\n    setViewBox({\n      x: newX,\n      y: newY,\n      width: newWidth,\n      height: newHeight\n    });\n    setScale(newScale);\n  };\n\n  // Handle zoom in button\n  const handleZoomIn = () => {\n    setScale(prev => {\n      const newScale = Math.min(5, prev * 1.2);\n\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Handle zoom out button\n  const handleZoomOut = () => {\n    setScale(prev => {\n      const newScale = Math.max(0.5, prev / 1.2);\n\n      // Adjust viewBox to maintain center\n      setViewBox(prev => {\n        const centerX = prev.x + prev.width / 2;\n        const centerY = prev.y + prev.height / 2;\n        const newWidth = prev.width * (scale / newScale);\n        const newHeight = prev.height * (scale / newScale);\n        return {\n          x: centerX - newWidth / 2,\n          y: centerY - newHeight / 2,\n          width: newWidth,\n          height: newHeight\n        };\n      });\n      return newScale;\n    });\n  };\n\n  // Reset machine positions to initial circle layout\n  const handleResetPositions = () => {\n    if (Object.keys(circlePositions).length > 0) {\n      setPositions({\n        ...circlePositions\n      });\n    }\n  };\n\n  // Compute viewBox string\n  const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `visualizer ${isReduced ? 'reduced' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: viewBoxString,\n      onMouseDown: handleSvgMouseDown,\n      onMouseMove: handleSvgMouseMove,\n      onMouseUp: handleSvgMouseUp,\n      onMouseLeave: handleSvgMouseLeave,\n      onWheel: handleWheel,\n      children: [links.map((link, index) => {\n        // Only render links if we have positions for both machines\n        if (!positions[link.source] || !positions[link.target]) return null;\n        return /*#__PURE__*/_jsxDEV(MachineLink, {\n          sourceX: positions[link.source].x,\n          sourceY: positions[link.source].y,\n          targetX: positions[link.target].x,\n          targetY: positions[link.target].y,\n          type: link.type\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 25\n        }, this);\n      }), machines.map(machine => {\n        // Only render machines if we have positions for them\n        if (!positions[machine.id]) return null;\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          onMouseDown: e => handleMachineDragStart(machine.id, e),\n          children: /*#__PURE__*/_jsxDEV(Machine, {\n            machine: machine,\n            x: positions[machine.id].x,\n            y: positions[machine.id].y,\n            onClick: () => onMachineClick(machine)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 29\n          }, this)\n        }, machine.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomIn,\n        className: \"zoom-button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleZoomOut,\n        className: \"zoom-button\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleResetPositions,\n        className: \"zoom-button reset-button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n};\n_s(Visualizer, \"xQys93udvEaDrnaS0SCH5BHvY70=\");\n_c = Visualizer;\nexport default Visualizer;\nvar _c;\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Machine","MachineLink","jsxDEV","_jsxDEV","Visualizer","machines","links","onMachineClick","isReduced","initialPositions","onPositionsChange","_s","svgRef","positions","setPositions","circlePositions","setCirclePositions","dragging","setDragging","dragOffset","setDragOffset","x","y","viewBox","setViewBox","width","height","isPanning","setIsPanning","lastPosition","setLastPosition","scale","setScale","centerX","centerY","radius","newCirclePositions","forEach","machine","index","angle","Math","PI","length","id","cos","sin","Object","keys","prev","newPositions","handleSvgMouseDown","e","button","clientX","clientY","clientToSvgCoordinates","svg","current","point","createSVGPoint","ctm","getScreenCTM","svgPoint","matrixTransform","inverse","handleSvgMouseMove","svgCoords","dx","dy","panSpeed","handleSvgMouseUp","handleSvgMouseLeave","handleMachineDragStart","stopPropagation","machinePos","handleWheel","preventDefault","zoomFactor","deltaY","newScale","max","min","newWidth","newHeight","mouseXRatio","mouseYRatio","newX","newY","handleZoomIn","handleZoomOut","handleResetPositions","viewBoxString","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onWheel","map","link","source","target","sourceX","sourceY","targetX","targetY","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/Visualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Machine from './Machine';\nimport MachineLink from './MachineLink';\nimport { Machine as MachineType, Link } from '../types';\nimport './Visualizer.css';\n\ninterface VisualizerProps {\n    machines: MachineType[];\n    links: Link[];\n    onMachineClick: (machine: MachineType) => void;\n    isReduced: boolean;\n    initialPositions?: Record<string, Position>;\n    onPositionsChange?: (positions: Record<string, Position>) => void;\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\nconst Visualizer: React.FC<VisualizerProps> = ({ \n    machines, \n    links, \n    onMachineClick,\n    isReduced,\n    initialPositions = {},\n    onPositionsChange\n}) => {\n    const svgRef = useRef<SVGSVGElement>(null);\n    const [positions, setPositions] = useState<Record<string, Position>>({});\n    const [circlePositions, setCirclePositions] = useState<Record<string, Position>>({});\n    const [dragging, setDragging] = useState<string | null>(null);\n    const [dragOffset, setDragOffset] = useState<Position>({ x: 0, y: 0 });\n    const [viewBox, setViewBox] = useState({ x: 0, y: 0, width: 550, height: 350 });\n    const [isPanning, setIsPanning] = useState(false);\n    const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n    const [scale, setScale] = useState(1);\n    \n    // Calculate and store circle positions\n    useEffect(() => {\n        const centerX = 275;\n        const centerY = 175;\n        const radius = 100;\n        \n        const newCirclePositions: Record<string, Position> = {};\n        machines.forEach((machine, index) => {\n            const angle = (index * 2 * Math.PI) / machines.length;\n            newCirclePositions[machine.id] = {\n                x: centerX + radius * Math.cos(angle),\n                y: centerY + radius * Math.sin(angle)\n            };\n        });\n        \n        setCirclePositions(newCirclePositions);\n    }, [machines]);\n    \n    // Initialize machine positions from props or in a circle layout\n    useEffect(() => {\n        if (Object.keys(initialPositions).length > 0) {\n            // Use provided positions if available\n            setPositions(prev => {\n                const newPositions = { ...prev };\n                \n                machines.forEach(machine => {\n                    if (initialPositions[machine.id]) {\n                        newPositions[machine.id] = initialPositions[machine.id];\n                    } else if (!newPositions[machine.id] && circlePositions[machine.id]) {\n                        // Fallback to circle position for new machines\n                        newPositions[machine.id] = circlePositions[machine.id];\n                    }\n                });\n                \n                return newPositions;\n            });\n        } else if (Object.keys(circlePositions).length > 0) {\n            // Use circle layout if no positions provided\n            setPositions(circlePositions);\n        }\n    }, [machines, initialPositions, circlePositions]);\n    \n    // Notify parent component when positions change\n    useEffect(() => {\n        if (onPositionsChange && Object.keys(positions).length > 0) {\n            onPositionsChange(positions);\n        }\n    }, [positions, onPositionsChange]);\n    \n    // Handle mouse down on SVG for panning\n    const handleSvgMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0 && !dragging) { // Left click and not dragging a machine\n            setIsPanning(true);\n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Get SVG coordinates from client coordinates\n    const clientToSvgCoordinates = (clientX: number, clientY: number) => {\n        const svg = svgRef.current;\n        if (!svg) return { x: 0, y: 0 };\n        \n        const point = svg.createSVGPoint();\n        point.x = clientX;\n        point.y = clientY;\n        \n        // Convert client coordinates to SVG coordinates\n        const ctm = svg.getScreenCTM();\n        if (!ctm) return { x: 0, y: 0 };\n        \n        const svgPoint = point.matrixTransform(ctm.inverse());\n        return { x: svgPoint.x, y: svgPoint.y };\n    };\n    \n    // Handle mouse move for panning and dragging\n    const handleSvgMouseMove = (e: React.MouseEvent) => {\n        if (dragging) {\n            // We're dragging a machine\n            const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n            \n            setPositions(prev => ({\n                ...prev,\n                [dragging]: {\n                    x: svgCoords.x - dragOffset.x,\n                    y: svgCoords.y - dragOffset.y\n                }\n            }));\n        } else if (isPanning) {\n            // We're panning the view\n            const dx = e.clientX - lastPosition.x;\n            const dy = e.clientY - lastPosition.y;\n            \n            // Adjust based on current scale\n            const panSpeed = 1 / scale;\n            \n            setViewBox(prev => ({\n                ...prev,\n                x: prev.x - dx * panSpeed,\n                y: prev.y - dy * panSpeed\n            }));\n            \n            setLastPosition({ x: e.clientX, y: e.clientY });\n        }\n    };\n    \n    // Handle mouse up for ending panning and dragging\n    const handleSvgMouseUp = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle mouse leave for ending panning and dragging\n    const handleSvgMouseLeave = () => {\n        setIsPanning(false);\n        setDragging(null);\n    };\n    \n    // Handle machine drag start\n    const handleMachineDragStart = (id: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent SVG from starting a pan operation\n        \n        const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n        const machinePos = positions[id];\n        \n        // Calculate offset to prevent jump on initial drag\n        setDragOffset({\n            x: svgCoords.x - machinePos.x,\n            y: svgCoords.y - machinePos.y\n        });\n        \n        setDragging(id);\n    };\n    \n    // Handle zoom with mouse wheel\n    const handleWheel = (e: React.WheelEvent) => {\n        e.preventDefault();\n        \n        const svg = svgRef.current;\n        if (!svg) return;\n        \n        // Get mouse position in SVG coordinates\n        const svgCoords = clientToSvgCoordinates(e.clientX, e.clientY);\n        \n        // Calculate new scale\n        const zoomFactor = e.deltaY > 0 ? 1.1 : 0.9;\n        const newScale = Math.max(0.5, Math.min(5, scale * zoomFactor));\n        \n        // Calculate new viewBox dimensions\n        const newWidth = viewBox.width * (newScale / scale);\n        const newHeight = viewBox.height * (newScale / scale);\n        \n        // Calculate new viewBox position to zoom toward/away from mouse\n        const mouseXRatio = (svgCoords.x - viewBox.x) / viewBox.width;\n        const mouseYRatio = (svgCoords.y - viewBox.y) / viewBox.height;\n        \n        const newX = svgCoords.x - mouseXRatio * newWidth;\n        const newY = svgCoords.y - mouseYRatio * newHeight;\n        \n        setViewBox({\n            x: newX,\n            y: newY,\n            width: newWidth,\n            height: newHeight\n        });\n        \n        setScale(newScale);\n    };\n    \n    // Handle zoom in button\n    const handleZoomIn = () => {\n        setScale(prev => {\n            const newScale = Math.min(5, prev * 1.2);\n            \n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                \n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                \n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            \n            return newScale;\n        });\n    };\n    \n    // Handle zoom out button\n    const handleZoomOut = () => {\n        setScale(prev => {\n            const newScale = Math.max(0.5, prev / 1.2);\n            \n            // Adjust viewBox to maintain center\n            setViewBox(prev => {\n                const centerX = prev.x + prev.width / 2;\n                const centerY = prev.y + prev.height / 2;\n                \n                const newWidth = prev.width * (scale / newScale);\n                const newHeight = prev.height * (scale / newScale);\n                \n                return {\n                    x: centerX - newWidth / 2,\n                    y: centerY - newHeight / 2,\n                    width: newWidth,\n                    height: newHeight\n                };\n            });\n            \n            return newScale;\n        });\n    };\n    \n    // Reset machine positions to initial circle layout\n    const handleResetPositions = () => {\n        if (Object.keys(circlePositions).length > 0) {\n            setPositions({ ...circlePositions });\n        }\n    };\n    \n    // Compute viewBox string\n    const viewBoxString = `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`;\n    \n    return (\n        <div className={`visualizer ${isReduced ? 'reduced' : ''}`}>\n            <svg \n                ref={svgRef}\n                width=\"100%\" \n                height=\"100%\" \n                viewBox={viewBoxString}\n                onMouseDown={handleSvgMouseDown}\n                onMouseMove={handleSvgMouseMove}\n                onMouseUp={handleSvgMouseUp}\n                onMouseLeave={handleSvgMouseLeave}\n                onWheel={handleWheel}\n            >\n                {/* Background removed */}\n                \n                {links.map((link, index) => {\n                    // Only render links if we have positions for both machines\n                    if (!positions[link.source] || !positions[link.target]) return null;\n                    \n                    return (\n                        <MachineLink\n                            key={index}\n                            sourceX={positions[link.source].x}\n                            sourceY={positions[link.source].y}\n                            targetX={positions[link.target].x}\n                            targetY={positions[link.target].y}\n                            type={link.type}\n                        />\n                    );\n                })}\n                \n                {machines.map(machine => {\n                    // Only render machines if we have positions for them\n                    if (!positions[machine.id]) return null;\n                    \n                    return (\n                        <g \n                            key={machine.id}\n                            onMouseDown={(e) => handleMachineDragStart(machine.id, e)}\n                        >\n                            <Machine\n                                machine={machine}\n                                x={positions[machine.id].x}\n                                y={positions[machine.id].y}\n                                onClick={() => onMachineClick(machine)}\n                            />\n                        </g>\n                    );\n                })}\n            </svg>\n            \n            {/* Zoom controls */}\n            <div className=\"visualizer-controls\">\n                <button \n                    onClick={handleZoomIn}\n                    className=\"zoom-button\"\n                >\n                    +\n                </button>\n                <button \n                    onClick={handleZoomOut}\n                    className=\"zoom-button\"\n                >\n                    -\n                </button>\n                <button \n                    onClick={handleResetPositions}\n                    className=\"zoom-button reset-button\"\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Visualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}