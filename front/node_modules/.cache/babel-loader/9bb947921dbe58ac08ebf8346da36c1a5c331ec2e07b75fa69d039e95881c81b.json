{"ast":null,"code":"var _jsxFileName = \"/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/MachineLink.tsx\";\nimport React from 'react';\nimport './MachineLink.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MachineLink = ({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  bidirectional = false\n}) => {\n  const angle = Math.atan2(targetY - sourceY, targetX - sourceX);\n  const radius = 40; // Rayon des cercles des machines\n  const startX = sourceX + Math.cos(angle) * radius;\n  const startY = sourceY + Math.sin(angle) * radius;\n  const endX = targetX - Math.cos(angle) * radius;\n  const endY = targetY - Math.sin(angle) * radius;\n\n  // Points pour la tête de la flèche\n  const arrowSize = 10;\n  const arrowAngle = 0.5; // Angle de la pointe de flèche en radians\n\n  const point1X = endX - arrowSize * Math.cos(angle - arrowAngle);\n  const point1Y = endY - arrowSize * Math.sin(angle - arrowAngle);\n  const point2X = endX - arrowSize * Math.cos(angle + arrowAngle);\n  const point2Y = endY - arrowSize * Math.sin(angle + arrowAngle);\n\n  // Points pour la flèche en sens inverse si bidirectional est true\n  const reverseAngle = Math.atan2(sourceY - targetY, sourceX - targetX);\n  const reversePoint1X = startX - arrowSize * Math.cos(reverseAngle - arrowAngle);\n  const reversePoint1Y = startY - arrowSize * Math.sin(reverseAngle - arrowAngle);\n  const reversePoint2X = startX - arrowSize * Math.cos(reverseAngle + arrowAngle);\n  const reversePoint2Y = startY - arrowSize * Math.sin(reverseAngle + arrowAngle);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"machine-link\",\n    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: startX,\n      y1: startY,\n      x2: endX,\n      y2: endY,\n      stroke: \"#00FF9D\",\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n      points: `${endX},${endY} ${point1X},${point1Y} ${point2X},${point2Y}`,\n      fill: \"#00FF9D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), bidirectional && /*#__PURE__*/_jsxDEV(\"polygon\", {\n      points: `${startX},${startY} ${reversePoint1X},${reversePoint1Y} ${reversePoint2X},${reversePoint2Y}`,\n      fill: \"#00FF9D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = MachineLink;\nexport default MachineLink;\nvar _c;\n$RefreshReg$(_c, \"MachineLink\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MachineLink","sourceX","sourceY","targetX","targetY","bidirectional","angle","Math","atan2","radius","startX","cos","startY","sin","endX","endY","arrowSize","arrowAngle","point1X","point1Y","point2X","point2Y","reverseAngle","reversePoint1X","reversePoint1Y","reversePoint2X","reversePoint2Y","className","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","points","fill","_c","$RefreshReg$"],"sources":["/home/dangremontlucas/Epitech/Year3/Semestre5/Wormsec/Wormsec/src/components/MachineLink.tsx"],"sourcesContent":["import React from 'react';\nimport './MachineLink.css';\n\ninterface MachineLinkProps {\n    sourceX: number;\n    sourceY: number;\n    targetX: number;\n    targetY: number;\n    bidirectional?: boolean;\n}\n\nconst MachineLink: React.FC<MachineLinkProps> = ({ \n    sourceX, \n    sourceY, \n    targetX, \n    targetY,\n    bidirectional = false\n}) => {\n\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX);\n    \n  const radius = 40; // Rayon des cercles des machines\n  const startX = sourceX + Math.cos(angle) * radius;\n  const startY = sourceY + Math.sin(angle) * radius;\n  const endX = targetX - Math.cos(angle) * radius;\n  const endY = targetY - Math.sin(angle) * radius;\n  \n  // Points pour la tête de la flèche\n  const arrowSize = 10;\n  const arrowAngle = 0.5; // Angle de la pointe de flèche en radians\n  \n  const point1X = endX - arrowSize * Math.cos(angle - arrowAngle);\n  const point1Y = endY - arrowSize * Math.sin(angle - arrowAngle);\n  const point2X = endX - arrowSize * Math.cos(angle + arrowAngle);\n  const point2Y = endY - arrowSize * Math.sin(angle + arrowAngle);\n  \n  // Points pour la flèche en sens inverse si bidirectional est true\n  const reverseAngle = Math.atan2(sourceY - targetY, sourceX - targetX);\n  const reversePoint1X = startX - arrowSize * Math.cos(reverseAngle - arrowAngle);\n  const reversePoint1Y = startY - arrowSize * Math.sin(reverseAngle - arrowAngle);\n  const reversePoint2X = startX - arrowSize * Math.cos(reverseAngle + arrowAngle);\n  const reversePoint2Y = startY - arrowSize * Math.sin(reverseAngle + arrowAngle);\n  \n  return (\n    <g className=\"machine-link\">\n      <line\n        x1={startX}\n        y1={startY}\n        x2={endX}\n        y2={endY}\n        stroke=\"#00FF9D\"\n        strokeWidth=\"2\"\n      />\n      <polygon \n        points={`${endX},${endY} ${point1X},${point1Y} ${point2X},${point2Y}`}\n        fill=\"#00FF9D\"\n      />\n      \n      {bidirectional && (\n        <polygon \n          points={`${startX},${startY} ${reversePoint1X},${reversePoint1Y} ${reversePoint2X},${reversePoint2Y}`}\n          fill=\"#00FF9D\"\n        />\n      )}\n    </g>\n  );\n};\n\nexport default MachineLink;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}